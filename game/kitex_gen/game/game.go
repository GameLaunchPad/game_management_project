// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package game

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/GameLaunchPad/game_management_project/kitex_gen/common"
)

type GameStatus int64

const (
	GameStatus_Unset     GameStatus = 0
	GameStatus_Draft     GameStatus = 1
	GameStatus_Reviewing GameStatus = 2
	GameStatus_Published GameStatus = 3
	GameStatus_Rejected  GameStatus = 4
)

func (p GameStatus) String() string {
	switch p {
	case GameStatus_Unset:
		return "Unset"
	case GameStatus_Draft:
		return "Draft"
	case GameStatus_Reviewing:
		return "Reviewing"
	case GameStatus_Published:
		return "Published"
	case GameStatus_Rejected:
		return "Rejected"
	}
	return "<UNSET>"
}

func GameStatusFromString(s string) (GameStatus, error) {
	switch s {
	case "Unset":
		return GameStatus_Unset, nil
	case "Draft":
		return GameStatus_Draft, nil
	case "Reviewing":
		return GameStatus_Reviewing, nil
	case "Published":
		return GameStatus_Published, nil
	case "Rejected":
		return GameStatus_Rejected, nil
	}
	return GameStatus(0), fmt.Errorf("not a valid GameStatus string")
}

func GameStatusPtr(v GameStatus) *GameStatus { return &v }
func (p *GameStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GameStatus(result.Int64)
	return
}

func (p *GameStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GamePlatform int64

const (
	GamePlatform_Unset   GamePlatform = 0
	GamePlatform_Android GamePlatform = 1
	GamePlatform_IOS     GamePlatform = 2
	GamePlatform_Web     GamePlatform = 3
)

func (p GamePlatform) String() string {
	switch p {
	case GamePlatform_Unset:
		return "Unset"
	case GamePlatform_Android:
		return "Android"
	case GamePlatform_IOS:
		return "IOS"
	case GamePlatform_Web:
		return "Web"
	}
	return "<UNSET>"
}

func GamePlatformFromString(s string) (GamePlatform, error) {
	switch s {
	case "Unset":
		return GamePlatform_Unset, nil
	case "Android":
		return GamePlatform_Android, nil
	case "IOS":
		return GamePlatform_IOS, nil
	case "Web":
		return GamePlatform_Web, nil
	}
	return GamePlatform(0), fmt.Errorf("not a valid GamePlatform string")
}

func GamePlatformPtr(v GamePlatform) *GamePlatform { return &v }
func (p *GamePlatform) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GamePlatform(result.Int64)
	return
}

func (p *GamePlatform) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SubmitMode int64

const (
	SubmitMode_Unset        SubmitMode = 0
	SubmitMode_SubmitDraft  SubmitMode = 1
	SubmitMode_SubmitReview SubmitMode = 2
)

func (p SubmitMode) String() string {
	switch p {
	case SubmitMode_Unset:
		return "Unset"
	case SubmitMode_SubmitDraft:
		return "SubmitDraft"
	case SubmitMode_SubmitReview:
		return "SubmitReview"
	}
	return "<UNSET>"
}

func SubmitModeFromString(s string) (SubmitMode, error) {
	switch s {
	case "Unset":
		return SubmitMode_Unset, nil
	case "SubmitDraft":
		return SubmitMode_SubmitDraft, nil
	case "SubmitReview":
		return SubmitMode_SubmitReview, nil
	}
	return SubmitMode(0), fmt.Errorf("not a valid SubmitMode string")
}

func SubmitModePtr(v SubmitMode) *SubmitMode { return &v }
func (p *SubmitMode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SubmitMode(result.Int64)
	return
}

func (p *SubmitMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ReviewResult_ int64

const (
	ReviewResult__Unset  ReviewResult_ = 0
	ReviewResult__Pass   ReviewResult_ = 1
	ReviewResult__Reject ReviewResult_ = 2
)

func (p ReviewResult_) String() string {
	switch p {
	case ReviewResult__Unset:
		return "Unset"
	case ReviewResult__Pass:
		return "Pass"
	case ReviewResult__Reject:
		return "Reject"
	}
	return "<UNSET>"
}

func ReviewResult_FromString(s string) (ReviewResult_, error) {
	switch s {
	case "Unset":
		return ReviewResult__Unset, nil
	case "Pass":
		return ReviewResult__Pass, nil
	case "Reject":
		return ReviewResult__Reject, nil
	}
	return ReviewResult_(0), fmt.Errorf("not a valid ReviewResult_ string")
}

func ReviewResult_Ptr(v ReviewResult_) *ReviewResult_ { return &v }
func (p *ReviewResult_) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ReviewResult_(result.Int64)
	return
}

func (p *ReviewResult_) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GetGameListRequest struct {
	Filter   *GameListFilter `thrift:"Filter,1,optional" frugal:"1,optional,GameListFilter" json:"Filter,omitempty"`
	Sorter   *GameListSorter `thrift:"Sorter,2,optional" frugal:"2,optional,GameListSorter" json:"Sorter,omitempty"`
	PageNum  int32           `thrift:"PageNum,3" frugal:"3,default,i32" json:"PageNum"`
	PageSize int32           `thrift:"PageSize,4" frugal:"4,default,i32" json:"PageSize"`
}

func NewGetGameListRequest() *GetGameListRequest {
	return &GetGameListRequest{}
}

func (p *GetGameListRequest) InitDefault() {
}

var GetGameListRequest_Filter_DEFAULT *GameListFilter

func (p *GetGameListRequest) GetFilter() (v *GameListFilter) {
	if !p.IsSetFilter() {
		return GetGameListRequest_Filter_DEFAULT
	}
	return p.Filter
}

var GetGameListRequest_Sorter_DEFAULT *GameListSorter

func (p *GetGameListRequest) GetSorter() (v *GameListSorter) {
	if !p.IsSetSorter() {
		return GetGameListRequest_Sorter_DEFAULT
	}
	return p.Sorter
}

func (p *GetGameListRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *GetGameListRequest) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *GetGameListRequest) SetFilter(val *GameListFilter) {
	p.Filter = val
}
func (p *GetGameListRequest) SetSorter(val *GameListSorter) {
	p.Sorter = val
}
func (p *GetGameListRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *GetGameListRequest) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *GetGameListRequest) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *GetGameListRequest) IsSetSorter() bool {
	return p.Sorter != nil
}

func (p *GetGameListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGameListRequest(%+v)", *p)
}

var fieldIDToName_GetGameListRequest = map[int16]string{
	1: "Filter",
	2: "Sorter",
	3: "PageNum",
	4: "PageSize",
}

type GameListFilter struct {
	FilterText *string `thrift:"FilterText,1,optional" frugal:"1,optional,string" json:"FilterText,omitempty"`
}

func NewGameListFilter() *GameListFilter {
	return &GameListFilter{}
}

func (p *GameListFilter) InitDefault() {
}

var GameListFilter_FilterText_DEFAULT string

func (p *GameListFilter) GetFilterText() (v string) {
	if !p.IsSetFilterText() {
		return GameListFilter_FilterText_DEFAULT
	}
	return *p.FilterText
}
func (p *GameListFilter) SetFilterText(val *string) {
	p.FilterText = val
}

func (p *GameListFilter) IsSetFilterText() bool {
	return p.FilterText != nil
}

func (p *GameListFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameListFilter(%+v)", *p)
}

var fieldIDToName_GameListFilter = map[int16]string{
	1: "FilterText",
}

type GameListSorter struct {
	UpdateTime *int64 `thrift:"UpdateTime,1,optional" frugal:"1,optional,i64" json:"UpdateTime,omitempty"`
}

func NewGameListSorter() *GameListSorter {
	return &GameListSorter{}
}

func (p *GameListSorter) InitDefault() {
}

var GameListSorter_UpdateTime_DEFAULT int64

func (p *GameListSorter) GetUpdateTime() (v int64) {
	if !p.IsSetUpdateTime() {
		return GameListSorter_UpdateTime_DEFAULT
	}
	return *p.UpdateTime
}
func (p *GameListSorter) SetUpdateTime(val *int64) {
	p.UpdateTime = val
}

func (p *GameListSorter) IsSetUpdateTime() bool {
	return p.UpdateTime != nil
}

func (p *GameListSorter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameListSorter(%+v)", *p)
}

var fieldIDToName_GameListSorter = map[int16]string{
	1: "UpdateTime",
}

type GetGameListResponse struct {
	GameList   []*BriefGame     `thrift:"GameList,1" frugal:"1,default,list<BriefGame>" json:"GameList"`
	TotalCount int32            `thrift:"TotalCount,2" frugal:"2,default,i32" json:"TotalCount"`
	BaseResp   *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewGetGameListResponse() *GetGameListResponse {
	return &GetGameListResponse{}
}

func (p *GetGameListResponse) InitDefault() {
}

func (p *GetGameListResponse) GetGameList() (v []*BriefGame) {
	return p.GameList
}

func (p *GetGameListResponse) GetTotalCount() (v int32) {
	return p.TotalCount
}

var GetGameListResponse_BaseResp_DEFAULT *common.BaseResp

func (p *GetGameListResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetGameListResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetGameListResponse) SetGameList(val []*BriefGame) {
	p.GameList = val
}
func (p *GetGameListResponse) SetTotalCount(val int32) {
	p.TotalCount = val
}
func (p *GetGameListResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *GetGameListResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetGameListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGameListResponse(%+v)", *p)
}

var fieldIDToName_GetGameListResponse = map[int16]string{
	1:   "GameList",
	2:   "TotalCount",
	255: "BaseResp",
}

type BriefGame struct {
	GameID      int64      `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
	CpID        int64      `thrift:"CpID,2" frugal:"2,default,i64" json:"CpID"`
	GameName    string     `thrift:"GameName,3" frugal:"3,default,string" json:"GameName"`
	GameIcon    string     `thrift:"GameIcon,4" frugal:"4,default,string" json:"GameIcon"`
	HeaderImage string     `thrift:"HeaderImage,5" frugal:"5,default,string" json:"HeaderImage"`
	CreateTime  int64      `thrift:"CreateTime,6" frugal:"6,default,i64" json:"CreateTime"`
	UpdateTime  int64      `thrift:"UpdateTime,7" frugal:"7,default,i64" json:"UpdateTime"`
	GameStatus  GameStatus `thrift:"GameStatus,8" frugal:"8,default,GameStatus" json:"GameStatus"`
}

func NewBriefGame() *BriefGame {
	return &BriefGame{}
}

func (p *BriefGame) InitDefault() {
}

func (p *BriefGame) GetGameID() (v int64) {
	return p.GameID
}

func (p *BriefGame) GetCpID() (v int64) {
	return p.CpID
}

func (p *BriefGame) GetGameName() (v string) {
	return p.GameName
}

func (p *BriefGame) GetGameIcon() (v string) {
	return p.GameIcon
}

func (p *BriefGame) GetHeaderImage() (v string) {
	return p.HeaderImage
}

func (p *BriefGame) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *BriefGame) GetUpdateTime() (v int64) {
	return p.UpdateTime
}

func (p *BriefGame) GetGameStatus() (v GameStatus) {
	return p.GameStatus
}
func (p *BriefGame) SetGameID(val int64) {
	p.GameID = val
}
func (p *BriefGame) SetCpID(val int64) {
	p.CpID = val
}
func (p *BriefGame) SetGameName(val string) {
	p.GameName = val
}
func (p *BriefGame) SetGameIcon(val string) {
	p.GameIcon = val
}
func (p *BriefGame) SetHeaderImage(val string) {
	p.HeaderImage = val
}
func (p *BriefGame) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *BriefGame) SetUpdateTime(val int64) {
	p.UpdateTime = val
}
func (p *BriefGame) SetGameStatus(val GameStatus) {
	p.GameStatus = val
}

func (p *BriefGame) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BriefGame(%+v)", *p)
}

var fieldIDToName_BriefGame = map[int16]string{
	1: "GameID",
	2: "CpID",
	3: "GameName",
	4: "GameIcon",
	5: "HeaderImage",
	6: "CreateTime",
	7: "UpdateTime",
	8: "GameStatus",
}

type GetGameDetailRequest struct {
	GameID int64 `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
}

func NewGetGameDetailRequest() *GetGameDetailRequest {
	return &GetGameDetailRequest{}
}

func (p *GetGameDetailRequest) InitDefault() {
}

func (p *GetGameDetailRequest) GetGameID() (v int64) {
	return p.GameID
}
func (p *GetGameDetailRequest) SetGameID(val int64) {
	p.GameID = val
}

func (p *GetGameDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGameDetailRequest(%+v)", *p)
}

var fieldIDToName_GetGameDetailRequest = map[int16]string{
	1: "GameID",
}

type GetGameDetailResponse struct {
	GameDetail *GameDetail      `thrift:"GameDetail,1" frugal:"1,default,GameDetail" json:"GameDetail"`
	BaseResp   *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewGetGameDetailResponse() *GetGameDetailResponse {
	return &GetGameDetailResponse{}
}

func (p *GetGameDetailResponse) InitDefault() {
}

var GetGameDetailResponse_GameDetail_DEFAULT *GameDetail

func (p *GetGameDetailResponse) GetGameDetail() (v *GameDetail) {
	if !p.IsSetGameDetail() {
		return GetGameDetailResponse_GameDetail_DEFAULT
	}
	return p.GameDetail
}

var GetGameDetailResponse_BaseResp_DEFAULT *common.BaseResp

func (p *GetGameDetailResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetGameDetailResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetGameDetailResponse) SetGameDetail(val *GameDetail) {
	p.GameDetail = val
}
func (p *GetGameDetailResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *GetGameDetailResponse) IsSetGameDetail() bool {
	return p.GameDetail != nil
}

func (p *GetGameDetailResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetGameDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetGameDetailResponse(%+v)", *p)
}

var fieldIDToName_GetGameDetailResponse = map[int16]string{
	1:   "GameDetail",
	255: "BaseResp",
}

type GameDetail struct {
	GameID             int64        `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
	CpID               int64        `thrift:"CpID,2" frugal:"2,default,i64" json:"CpID"`
	OnlineGameVersion  *GameVersion `thrift:"OnlineGameVersion,3" frugal:"3,default,GameVersion" json:"OnlineGameVersion"`
	NewestGameVersion_ *GameVersion `thrift:"NewestGameVersion,4" frugal:"4,default,GameVersion" json:"NewestGameVersion"`
	CreateTime         int64        `thrift:"CreateTime,5" frugal:"5,default,i64" json:"CreateTime"`
	ModifyTime         int64        `thrift:"ModifyTime,6" frugal:"6,default,i64" json:"ModifyTime"`
}

func NewGameDetail() *GameDetail {
	return &GameDetail{}
}

func (p *GameDetail) InitDefault() {
}

func (p *GameDetail) GetGameID() (v int64) {
	return p.GameID
}

func (p *GameDetail) GetCpID() (v int64) {
	return p.CpID
}

var GameDetail_OnlineGameVersion_DEFAULT *GameVersion

func (p *GameDetail) GetOnlineGameVersion() (v *GameVersion) {
	if !p.IsSetOnlineGameVersion() {
		return GameDetail_OnlineGameVersion_DEFAULT
	}
	return p.OnlineGameVersion
}

var GameDetail_NewestGameVersion__DEFAULT *GameVersion

func (p *GameDetail) GetNewestGameVersion_() (v *GameVersion) {
	if !p.IsSetNewestGameVersion_() {
		return GameDetail_NewestGameVersion__DEFAULT
	}
	return p.NewestGameVersion_
}

func (p *GameDetail) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *GameDetail) GetModifyTime() (v int64) {
	return p.ModifyTime
}
func (p *GameDetail) SetGameID(val int64) {
	p.GameID = val
}
func (p *GameDetail) SetCpID(val int64) {
	p.CpID = val
}
func (p *GameDetail) SetOnlineGameVersion(val *GameVersion) {
	p.OnlineGameVersion = val
}
func (p *GameDetail) SetNewestGameVersion_(val *GameVersion) {
	p.NewestGameVersion_ = val
}
func (p *GameDetail) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *GameDetail) SetModifyTime(val int64) {
	p.ModifyTime = val
}

func (p *GameDetail) IsSetOnlineGameVersion() bool {
	return p.OnlineGameVersion != nil
}

func (p *GameDetail) IsSetNewestGameVersion_() bool {
	return p.NewestGameVersion_ != nil
}

func (p *GameDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameDetail(%+v)", *p)
}

var fieldIDToName_GameDetail = map[int16]string{
	1: "GameID",
	2: "CpID",
	3: "OnlineGameVersion",
	4: "NewestGameVersion",
	5: "CreateTime",
	6: "ModifyTime",
}

type GameVersion struct {
	GameID                 int64          `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
	GamVersionID           int64          `thrift:"GamVersionID,2" frugal:"2,default,i64" json:"GamVersionID"`
	GameName               string         `thrift:"GameName,3" frugal:"3,default,string" json:"GameName"`
	GameIcon               string         `thrift:"GameIcon,4" frugal:"4,default,string" json:"GameIcon"`
	HeaderImage            string         `thrift:"HeaderImage,5" frugal:"5,default,string" json:"HeaderImage"`
	GameIntroduction       string         `thrift:"GameIntroduction,6" frugal:"6,default,string" json:"GameIntroduction"`
	GameIntroductionImages []string       `thrift:"GameIntroductionImages,7" frugal:"7,default,list<string>" json:"GameIntroductionImages"`
	GamePlatforms          []GamePlatform `thrift:"GamePlatforms,8" frugal:"8,default,list<GamePlatform>" json:"GamePlatforms"`
	PackageName            string         `thrift:"PackageName,9" frugal:"9,default,string" json:"PackageName"`
	DownloadURL            string         `thrift:"DownloadURL,10" frugal:"10,default,string" json:"DownloadURL"`
	GameStatus             GameStatus     `thrift:"GameStatus,11" frugal:"11,default,GameStatus" json:"GameStatus"`
	ReviewComment          string         `thrift:"ReviewComment,12" frugal:"12,default,string" json:"ReviewComment"`
	ReviewTime             int64          `thrift:"ReviewTime,13" frugal:"13,default,i64" json:"ReviewTime"`
	CreateTime             int64          `thrift:"CreateTime,14" frugal:"14,default,i64" json:"CreateTime"`
	UpdateTime             int64          `thrift:"UpdateTime,15" frugal:"15,default,i64" json:"UpdateTime"`
}

func NewGameVersion() *GameVersion {
	return &GameVersion{}
}

func (p *GameVersion) InitDefault() {
}

func (p *GameVersion) GetGameID() (v int64) {
	return p.GameID
}

func (p *GameVersion) GetGamVersionID() (v int64) {
	return p.GamVersionID
}

func (p *GameVersion) GetGameName() (v string) {
	return p.GameName
}

func (p *GameVersion) GetGameIcon() (v string) {
	return p.GameIcon
}

func (p *GameVersion) GetHeaderImage() (v string) {
	return p.HeaderImage
}

func (p *GameVersion) GetGameIntroduction() (v string) {
	return p.GameIntroduction
}

func (p *GameVersion) GetGameIntroductionImages() (v []string) {
	return p.GameIntroductionImages
}

func (p *GameVersion) GetGamePlatforms() (v []GamePlatform) {
	return p.GamePlatforms
}

func (p *GameVersion) GetPackageName() (v string) {
	return p.PackageName
}

func (p *GameVersion) GetDownloadURL() (v string) {
	return p.DownloadURL
}

func (p *GameVersion) GetGameStatus() (v GameStatus) {
	return p.GameStatus
}

func (p *GameVersion) GetReviewComment() (v string) {
	return p.ReviewComment
}

func (p *GameVersion) GetReviewTime() (v int64) {
	return p.ReviewTime
}

func (p *GameVersion) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *GameVersion) GetUpdateTime() (v int64) {
	return p.UpdateTime
}
func (p *GameVersion) SetGameID(val int64) {
	p.GameID = val
}
func (p *GameVersion) SetGamVersionID(val int64) {
	p.GamVersionID = val
}
func (p *GameVersion) SetGameName(val string) {
	p.GameName = val
}
func (p *GameVersion) SetGameIcon(val string) {
	p.GameIcon = val
}
func (p *GameVersion) SetHeaderImage(val string) {
	p.HeaderImage = val
}
func (p *GameVersion) SetGameIntroduction(val string) {
	p.GameIntroduction = val
}
func (p *GameVersion) SetGameIntroductionImages(val []string) {
	p.GameIntroductionImages = val
}
func (p *GameVersion) SetGamePlatforms(val []GamePlatform) {
	p.GamePlatforms = val
}
func (p *GameVersion) SetPackageName(val string) {
	p.PackageName = val
}
func (p *GameVersion) SetDownloadURL(val string) {
	p.DownloadURL = val
}
func (p *GameVersion) SetGameStatus(val GameStatus) {
	p.GameStatus = val
}
func (p *GameVersion) SetReviewComment(val string) {
	p.ReviewComment = val
}
func (p *GameVersion) SetReviewTime(val int64) {
	p.ReviewTime = val
}
func (p *GameVersion) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *GameVersion) SetUpdateTime(val int64) {
	p.UpdateTime = val
}

func (p *GameVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameVersion(%+v)", *p)
}

var fieldIDToName_GameVersion = map[int16]string{
	1:  "GameID",
	2:  "GamVersionID",
	3:  "GameName",
	4:  "GameIcon",
	5:  "HeaderImage",
	6:  "GameIntroduction",
	7:  "GameIntroductionImages",
	8:  "GamePlatforms",
	9:  "PackageName",
	10: "DownloadURL",
	11: "GameStatus",
	12: "ReviewComment",
	13: "ReviewTime",
	14: "CreateTime",
	15: "UpdateTime",
}

type GameDetailWrite struct {
	GameID      int64        `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
	CpID        int64        `thrift:"CpID,2" frugal:"2,default,i64" json:"CpID"`
	GameVersion *GameVersion `thrift:"GameVersion,3" frugal:"3,default,GameVersion" json:"GameVersion"`
}

func NewGameDetailWrite() *GameDetailWrite {
	return &GameDetailWrite{}
}

func (p *GameDetailWrite) InitDefault() {
}

func (p *GameDetailWrite) GetGameID() (v int64) {
	return p.GameID
}

func (p *GameDetailWrite) GetCpID() (v int64) {
	return p.CpID
}

var GameDetailWrite_GameVersion_DEFAULT *GameVersion

func (p *GameDetailWrite) GetGameVersion() (v *GameVersion) {
	if !p.IsSetGameVersion() {
		return GameDetailWrite_GameVersion_DEFAULT
	}
	return p.GameVersion
}
func (p *GameDetailWrite) SetGameID(val int64) {
	p.GameID = val
}
func (p *GameDetailWrite) SetCpID(val int64) {
	p.CpID = val
}
func (p *GameDetailWrite) SetGameVersion(val *GameVersion) {
	p.GameVersion = val
}

func (p *GameDetailWrite) IsSetGameVersion() bool {
	return p.GameVersion != nil
}

func (p *GameDetailWrite) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameDetailWrite(%+v)", *p)
}

var fieldIDToName_GameDetailWrite = map[int16]string{
	1: "GameID",
	2: "CpID",
	3: "GameVersion",
}

type CreateGameDetailRequest struct {
	GameDetail *GameDetailWrite `thrift:"GameDetail,1" frugal:"1,default,GameDetailWrite" json:"GameDetail"`
	SubmitMode SubmitMode       `thrift:"SubmitMode,2" frugal:"2,default,SubmitMode" json:"SubmitMode"`
}

func NewCreateGameDetailRequest() *CreateGameDetailRequest {
	return &CreateGameDetailRequest{}
}

func (p *CreateGameDetailRequest) InitDefault() {
}

var CreateGameDetailRequest_GameDetail_DEFAULT *GameDetailWrite

func (p *CreateGameDetailRequest) GetGameDetail() (v *GameDetailWrite) {
	if !p.IsSetGameDetail() {
		return CreateGameDetailRequest_GameDetail_DEFAULT
	}
	return p.GameDetail
}

func (p *CreateGameDetailRequest) GetSubmitMode() (v SubmitMode) {
	return p.SubmitMode
}
func (p *CreateGameDetailRequest) SetGameDetail(val *GameDetailWrite) {
	p.GameDetail = val
}
func (p *CreateGameDetailRequest) SetSubmitMode(val SubmitMode) {
	p.SubmitMode = val
}

func (p *CreateGameDetailRequest) IsSetGameDetail() bool {
	return p.GameDetail != nil
}

func (p *CreateGameDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGameDetailRequest(%+v)", *p)
}

var fieldIDToName_CreateGameDetailRequest = map[int16]string{
	1: "GameDetail",
	2: "SubmitMode",
}

type CreateGameDetailResponse struct {
	GameID   int64            `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
	BaseResp *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewCreateGameDetailResponse() *CreateGameDetailResponse {
	return &CreateGameDetailResponse{}
}

func (p *CreateGameDetailResponse) InitDefault() {
}

func (p *CreateGameDetailResponse) GetGameID() (v int64) {
	return p.GameID
}

var CreateGameDetailResponse_BaseResp_DEFAULT *common.BaseResp

func (p *CreateGameDetailResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateGameDetailResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateGameDetailResponse) SetGameID(val int64) {
	p.GameID = val
}
func (p *CreateGameDetailResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *CreateGameDetailResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateGameDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGameDetailResponse(%+v)", *p)
}

var fieldIDToName_CreateGameDetailResponse = map[int16]string{
	1:   "GameID",
	255: "BaseResp",
}

type ReviewGameVersionRequest struct {
	GameID        int64         `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
	GameVersionID int64         `thrift:"GameVersionID,2" frugal:"2,default,i64" json:"GameVersionID"`
	ReviewResult_ ReviewResult_ `thrift:"ReviewResult,3" frugal:"3,default,ReviewResult_" json:"ReviewResult"`
}

func NewReviewGameVersionRequest() *ReviewGameVersionRequest {
	return &ReviewGameVersionRequest{}
}

func (p *ReviewGameVersionRequest) InitDefault() {
}

func (p *ReviewGameVersionRequest) GetGameID() (v int64) {
	return p.GameID
}

func (p *ReviewGameVersionRequest) GetGameVersionID() (v int64) {
	return p.GameVersionID
}

func (p *ReviewGameVersionRequest) GetReviewResult_() (v ReviewResult_) {
	return p.ReviewResult_
}
func (p *ReviewGameVersionRequest) SetGameID(val int64) {
	p.GameID = val
}
func (p *ReviewGameVersionRequest) SetGameVersionID(val int64) {
	p.GameVersionID = val
}
func (p *ReviewGameVersionRequest) SetReviewResult_(val ReviewResult_) {
	p.ReviewResult_ = val
}

func (p *ReviewGameVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewGameVersionRequest(%+v)", *p)
}

var fieldIDToName_ReviewGameVersionRequest = map[int16]string{
	1: "GameID",
	2: "GameVersionID",
	3: "ReviewResult",
}

type ReviewGameVersionResponse struct {
	BaseResp *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewReviewGameVersionResponse() *ReviewGameVersionResponse {
	return &ReviewGameVersionResponse{}
}

func (p *ReviewGameVersionResponse) InitDefault() {
}

var ReviewGameVersionResponse_BaseResp_DEFAULT *common.BaseResp

func (p *ReviewGameVersionResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return ReviewGameVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ReviewGameVersionResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *ReviewGameVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ReviewGameVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewGameVersionResponse(%+v)", *p)
}

var fieldIDToName_ReviewGameVersionResponse = map[int16]string{
	255: "BaseResp",
}

type DeleteGameDraftRequest struct {
	GameID int64 `thrift:"GameID,1" frugal:"1,default,i64" json:"GameID"`
}

func NewDeleteGameDraftRequest() *DeleteGameDraftRequest {
	return &DeleteGameDraftRequest{}
}

func (p *DeleteGameDraftRequest) InitDefault() {
}

func (p *DeleteGameDraftRequest) GetGameID() (v int64) {
	return p.GameID
}
func (p *DeleteGameDraftRequest) SetGameID(val int64) {
	p.GameID = val
}

func (p *DeleteGameDraftRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteGameDraftRequest(%+v)", *p)
}

var fieldIDToName_DeleteGameDraftRequest = map[int16]string{
	1: "GameID",
}

type DeleteGameDraftResponse struct {
	BaseResp *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewDeleteGameDraftResponse() *DeleteGameDraftResponse {
	return &DeleteGameDraftResponse{}
}

func (p *DeleteGameDraftResponse) InitDefault() {
}

var DeleteGameDraftResponse_BaseResp_DEFAULT *common.BaseResp

func (p *DeleteGameDraftResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return DeleteGameDraftResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteGameDraftResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *DeleteGameDraftResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteGameDraftResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteGameDraftResponse(%+v)", *p)
}

var fieldIDToName_DeleteGameDraftResponse = map[int16]string{
	255: "BaseResp",
}

type GameService interface {
	GetGameList(ctx context.Context, req *GetGameListRequest) (r *GetGameListResponse, err error)

	GetGameDetail(ctx context.Context, req *GetGameDetailRequest) (r *GetGameDetailResponse, err error)

	CreateGameDetail(ctx context.Context, req *CreateGameDetailRequest) (r *CreateGameDetailResponse, err error)

	ReviewGameVersion(ctx context.Context, req *ReviewGameVersionRequest) (r *ReviewGameVersionResponse, err error)

	DeleteGameDraft(ctx context.Context, req *DeleteGameDraftRequest) (r *DeleteGameDraftResponse, err error)
}

type GameServiceGetGameListArgs struct {
	Req *GetGameListRequest `thrift:"req,1" frugal:"1,default,GetGameListRequest" json:"req"`
}

func NewGameServiceGetGameListArgs() *GameServiceGetGameListArgs {
	return &GameServiceGetGameListArgs{}
}

func (p *GameServiceGetGameListArgs) InitDefault() {
}

var GameServiceGetGameListArgs_Req_DEFAULT *GetGameListRequest

func (p *GameServiceGetGameListArgs) GetReq() (v *GetGameListRequest) {
	if !p.IsSetReq() {
		return GameServiceGetGameListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GameServiceGetGameListArgs) SetReq(val *GetGameListRequest) {
	p.Req = val
}

func (p *GameServiceGetGameListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GameServiceGetGameListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceGetGameListArgs(%+v)", *p)
}

var fieldIDToName_GameServiceGetGameListArgs = map[int16]string{
	1: "req",
}

type GameServiceGetGameListResult struct {
	Success *GetGameListResponse `thrift:"success,0,optional" frugal:"0,optional,GetGameListResponse" json:"success,omitempty"`
}

func NewGameServiceGetGameListResult() *GameServiceGetGameListResult {
	return &GameServiceGetGameListResult{}
}

func (p *GameServiceGetGameListResult) InitDefault() {
}

var GameServiceGetGameListResult_Success_DEFAULT *GetGameListResponse

func (p *GameServiceGetGameListResult) GetSuccess() (v *GetGameListResponse) {
	if !p.IsSetSuccess() {
		return GameServiceGetGameListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GameServiceGetGameListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetGameListResponse)
}

func (p *GameServiceGetGameListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GameServiceGetGameListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceGetGameListResult(%+v)", *p)
}

var fieldIDToName_GameServiceGetGameListResult = map[int16]string{
	0: "success",
}

type GameServiceGetGameDetailArgs struct {
	Req *GetGameDetailRequest `thrift:"req,1" frugal:"1,default,GetGameDetailRequest" json:"req"`
}

func NewGameServiceGetGameDetailArgs() *GameServiceGetGameDetailArgs {
	return &GameServiceGetGameDetailArgs{}
}

func (p *GameServiceGetGameDetailArgs) InitDefault() {
}

var GameServiceGetGameDetailArgs_Req_DEFAULT *GetGameDetailRequest

func (p *GameServiceGetGameDetailArgs) GetReq() (v *GetGameDetailRequest) {
	if !p.IsSetReq() {
		return GameServiceGetGameDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GameServiceGetGameDetailArgs) SetReq(val *GetGameDetailRequest) {
	p.Req = val
}

func (p *GameServiceGetGameDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GameServiceGetGameDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceGetGameDetailArgs(%+v)", *p)
}

var fieldIDToName_GameServiceGetGameDetailArgs = map[int16]string{
	1: "req",
}

type GameServiceGetGameDetailResult struct {
	Success *GetGameDetailResponse `thrift:"success,0,optional" frugal:"0,optional,GetGameDetailResponse" json:"success,omitempty"`
}

func NewGameServiceGetGameDetailResult() *GameServiceGetGameDetailResult {
	return &GameServiceGetGameDetailResult{}
}

func (p *GameServiceGetGameDetailResult) InitDefault() {
}

var GameServiceGetGameDetailResult_Success_DEFAULT *GetGameDetailResponse

func (p *GameServiceGetGameDetailResult) GetSuccess() (v *GetGameDetailResponse) {
	if !p.IsSetSuccess() {
		return GameServiceGetGameDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GameServiceGetGameDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetGameDetailResponse)
}

func (p *GameServiceGetGameDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GameServiceGetGameDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceGetGameDetailResult(%+v)", *p)
}

var fieldIDToName_GameServiceGetGameDetailResult = map[int16]string{
	0: "success",
}

type GameServiceCreateGameDetailArgs struct {
	Req *CreateGameDetailRequest `thrift:"req,1" frugal:"1,default,CreateGameDetailRequest" json:"req"`
}

func NewGameServiceCreateGameDetailArgs() *GameServiceCreateGameDetailArgs {
	return &GameServiceCreateGameDetailArgs{}
}

func (p *GameServiceCreateGameDetailArgs) InitDefault() {
}

var GameServiceCreateGameDetailArgs_Req_DEFAULT *CreateGameDetailRequest

func (p *GameServiceCreateGameDetailArgs) GetReq() (v *CreateGameDetailRequest) {
	if !p.IsSetReq() {
		return GameServiceCreateGameDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GameServiceCreateGameDetailArgs) SetReq(val *CreateGameDetailRequest) {
	p.Req = val
}

func (p *GameServiceCreateGameDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GameServiceCreateGameDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceCreateGameDetailArgs(%+v)", *p)
}

var fieldIDToName_GameServiceCreateGameDetailArgs = map[int16]string{
	1: "req",
}

type GameServiceCreateGameDetailResult struct {
	Success *CreateGameDetailResponse `thrift:"success,0,optional" frugal:"0,optional,CreateGameDetailResponse" json:"success,omitempty"`
}

func NewGameServiceCreateGameDetailResult() *GameServiceCreateGameDetailResult {
	return &GameServiceCreateGameDetailResult{}
}

func (p *GameServiceCreateGameDetailResult) InitDefault() {
}

var GameServiceCreateGameDetailResult_Success_DEFAULT *CreateGameDetailResponse

func (p *GameServiceCreateGameDetailResult) GetSuccess() (v *CreateGameDetailResponse) {
	if !p.IsSetSuccess() {
		return GameServiceCreateGameDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GameServiceCreateGameDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateGameDetailResponse)
}

func (p *GameServiceCreateGameDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GameServiceCreateGameDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceCreateGameDetailResult(%+v)", *p)
}

var fieldIDToName_GameServiceCreateGameDetailResult = map[int16]string{
	0: "success",
}

type GameServiceReviewGameVersionArgs struct {
	Req *ReviewGameVersionRequest `thrift:"req,1" frugal:"1,default,ReviewGameVersionRequest" json:"req"`
}

func NewGameServiceReviewGameVersionArgs() *GameServiceReviewGameVersionArgs {
	return &GameServiceReviewGameVersionArgs{}
}

func (p *GameServiceReviewGameVersionArgs) InitDefault() {
}

var GameServiceReviewGameVersionArgs_Req_DEFAULT *ReviewGameVersionRequest

func (p *GameServiceReviewGameVersionArgs) GetReq() (v *ReviewGameVersionRequest) {
	if !p.IsSetReq() {
		return GameServiceReviewGameVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GameServiceReviewGameVersionArgs) SetReq(val *ReviewGameVersionRequest) {
	p.Req = val
}

func (p *GameServiceReviewGameVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GameServiceReviewGameVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceReviewGameVersionArgs(%+v)", *p)
}

var fieldIDToName_GameServiceReviewGameVersionArgs = map[int16]string{
	1: "req",
}

type GameServiceReviewGameVersionResult struct {
	Success *ReviewGameVersionResponse `thrift:"success,0,optional" frugal:"0,optional,ReviewGameVersionResponse" json:"success,omitempty"`
}

func NewGameServiceReviewGameVersionResult() *GameServiceReviewGameVersionResult {
	return &GameServiceReviewGameVersionResult{}
}

func (p *GameServiceReviewGameVersionResult) InitDefault() {
}

var GameServiceReviewGameVersionResult_Success_DEFAULT *ReviewGameVersionResponse

func (p *GameServiceReviewGameVersionResult) GetSuccess() (v *ReviewGameVersionResponse) {
	if !p.IsSetSuccess() {
		return GameServiceReviewGameVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GameServiceReviewGameVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReviewGameVersionResponse)
}

func (p *GameServiceReviewGameVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GameServiceReviewGameVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceReviewGameVersionResult(%+v)", *p)
}

var fieldIDToName_GameServiceReviewGameVersionResult = map[int16]string{
	0: "success",
}

type GameServiceDeleteGameDraftArgs struct {
	Req *DeleteGameDraftRequest `thrift:"req,1" frugal:"1,default,DeleteGameDraftRequest" json:"req"`
}

func NewGameServiceDeleteGameDraftArgs() *GameServiceDeleteGameDraftArgs {
	return &GameServiceDeleteGameDraftArgs{}
}

func (p *GameServiceDeleteGameDraftArgs) InitDefault() {
}

var GameServiceDeleteGameDraftArgs_Req_DEFAULT *DeleteGameDraftRequest

func (p *GameServiceDeleteGameDraftArgs) GetReq() (v *DeleteGameDraftRequest) {
	if !p.IsSetReq() {
		return GameServiceDeleteGameDraftArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GameServiceDeleteGameDraftArgs) SetReq(val *DeleteGameDraftRequest) {
	p.Req = val
}

func (p *GameServiceDeleteGameDraftArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GameServiceDeleteGameDraftArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceDeleteGameDraftArgs(%+v)", *p)
}

var fieldIDToName_GameServiceDeleteGameDraftArgs = map[int16]string{
	1: "req",
}

type GameServiceDeleteGameDraftResult struct {
	Success *DeleteGameDraftResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteGameDraftResponse" json:"success,omitempty"`
}

func NewGameServiceDeleteGameDraftResult() *GameServiceDeleteGameDraftResult {
	return &GameServiceDeleteGameDraftResult{}
}

func (p *GameServiceDeleteGameDraftResult) InitDefault() {
}

var GameServiceDeleteGameDraftResult_Success_DEFAULT *DeleteGameDraftResponse

func (p *GameServiceDeleteGameDraftResult) GetSuccess() (v *DeleteGameDraftResponse) {
	if !p.IsSetSuccess() {
		return GameServiceDeleteGameDraftResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GameServiceDeleteGameDraftResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteGameDraftResponse)
}

func (p *GameServiceDeleteGameDraftResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GameServiceDeleteGameDraftResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GameServiceDeleteGameDraftResult(%+v)", *p)
}

var fieldIDToName_GameServiceDeleteGameDraftResult = map[int16]string{
	0: "success",
}
