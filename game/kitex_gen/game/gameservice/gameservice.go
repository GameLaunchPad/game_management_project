// Code generated by Kitex v0.15.1. DO NOT EDIT.

package gameservice

import (
	"context"
	"errors"
	game "github.com/GameLaunchPad/game_management_project/kitex_gen/game"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetGameList": kitex.NewMethodInfo(
		getGameListHandler,
		newGameServiceGetGameListArgs,
		newGameServiceGetGameListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetGameDetail": kitex.NewMethodInfo(
		getGameDetailHandler,
		newGameServiceGetGameDetailArgs,
		newGameServiceGetGameDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateGameDetail": kitex.NewMethodInfo(
		createGameDetailHandler,
		newGameServiceCreateGameDetailArgs,
		newGameServiceCreateGameDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ReviewGameVersion": kitex.NewMethodInfo(
		reviewGameVersionHandler,
		newGameServiceReviewGameVersionArgs,
		newGameServiceReviewGameVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteGameDraft": kitex.NewMethodInfo(
		deleteGameDraftHandler,
		newGameServiceDeleteGameDraftArgs,
		newGameServiceDeleteGameDraftResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	gameServiceServiceInfo                = NewServiceInfo()
	gameServiceServiceInfoForClient       = NewServiceInfoForClient()
	gameServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return gameServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return gameServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return gameServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "GameService"
	handlerType := (*game.GameService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "game",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func getGameListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*game.GameServiceGetGameListArgs)
	realResult := result.(*game.GameServiceGetGameListResult)
	success, err := handler.(game.GameService).GetGameList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGameServiceGetGameListArgs() interface{} {
	return game.NewGameServiceGetGameListArgs()
}

func newGameServiceGetGameListResult() interface{} {
	return game.NewGameServiceGetGameListResult()
}

func getGameDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*game.GameServiceGetGameDetailArgs)
	realResult := result.(*game.GameServiceGetGameDetailResult)
	success, err := handler.(game.GameService).GetGameDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGameServiceGetGameDetailArgs() interface{} {
	return game.NewGameServiceGetGameDetailArgs()
}

func newGameServiceGetGameDetailResult() interface{} {
	return game.NewGameServiceGetGameDetailResult()
}

func createGameDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*game.GameServiceCreateGameDetailArgs)
	realResult := result.(*game.GameServiceCreateGameDetailResult)
	success, err := handler.(game.GameService).CreateGameDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGameServiceCreateGameDetailArgs() interface{} {
	return game.NewGameServiceCreateGameDetailArgs()
}

func newGameServiceCreateGameDetailResult() interface{} {
	return game.NewGameServiceCreateGameDetailResult()
}

func reviewGameVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*game.GameServiceReviewGameVersionArgs)
	realResult := result.(*game.GameServiceReviewGameVersionResult)
	success, err := handler.(game.GameService).ReviewGameVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGameServiceReviewGameVersionArgs() interface{} {
	return game.NewGameServiceReviewGameVersionArgs()
}

func newGameServiceReviewGameVersionResult() interface{} {
	return game.NewGameServiceReviewGameVersionResult()
}

func deleteGameDraftHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*game.GameServiceDeleteGameDraftArgs)
	realResult := result.(*game.GameServiceDeleteGameDraftResult)
	success, err := handler.(game.GameService).DeleteGameDraft(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGameServiceDeleteGameDraftArgs() interface{} {
	return game.NewGameServiceDeleteGameDraftArgs()
}

func newGameServiceDeleteGameDraftResult() interface{} {
	return game.NewGameServiceDeleteGameDraftResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetGameList(ctx context.Context, req *game.GetGameListRequest) (r *game.GetGameListResponse, err error) {
	var _args game.GameServiceGetGameListArgs
	_args.Req = req
	var _result game.GameServiceGetGameListResult
	if err = p.c.Call(ctx, "GetGameList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetGameDetail(ctx context.Context, req *game.GetGameDetailRequest) (r *game.GetGameDetailResponse, err error) {
	var _args game.GameServiceGetGameDetailArgs
	_args.Req = req
	var _result game.GameServiceGetGameDetailResult
	if err = p.c.Call(ctx, "GetGameDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateGameDetail(ctx context.Context, req *game.CreateGameDetailRequest) (r *game.CreateGameDetailResponse, err error) {
	var _args game.GameServiceCreateGameDetailArgs
	_args.Req = req
	var _result game.GameServiceCreateGameDetailResult
	if err = p.c.Call(ctx, "CreateGameDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReviewGameVersion(ctx context.Context, req *game.ReviewGameVersionRequest) (r *game.ReviewGameVersionResponse, err error) {
	var _args game.GameServiceReviewGameVersionArgs
	_args.Req = req
	var _result game.GameServiceReviewGameVersionResult
	if err = p.c.Call(ctx, "ReviewGameVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteGameDraft(ctx context.Context, req *game.DeleteGameDraftRequest) (r *game.DeleteGameDraftResponse, err error) {
	var _args game.GameServiceDeleteGameDraftArgs
	_args.Req = req
	var _result game.GameServiceDeleteGameDraftResult
	if err = p.c.Call(ctx, "DeleteGameDraft", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
