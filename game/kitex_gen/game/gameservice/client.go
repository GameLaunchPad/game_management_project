// Code generated by Kitex v0.15.1. DO NOT EDIT.

package gameservice

import (
	"context"
	game "github.com/GameLaunchPad/game_management_project/kitex_gen/game"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetGameList(ctx context.Context, req *game.GetGameListRequest, callOptions ...callopt.Option) (r *game.GetGameListResponse, err error)
	GetGameDetail(ctx context.Context, req *game.GetGameDetailRequest, callOptions ...callopt.Option) (r *game.GetGameDetailResponse, err error)
	UpdateGameDraft(ctx context.Context, req *game.UpdateGameDraftRequest, callOptions ...callopt.Option) (r *game.UpdateGameDraftResponse, err error)
	CreateGameDetail(ctx context.Context, req *game.CreateGameDetailRequest, callOptions ...callopt.Option) (r *game.CreateGameDetailResponse, err error)
	ReviewGameVersion(ctx context.Context, req *game.ReviewGameVersionRequest, callOptions ...callopt.Option) (r *game.ReviewGameVersionResponse, err error)
	DeleteGameDraft(ctx context.Context, req *game.DeleteGameDraftRequest, callOptions ...callopt.Option) (r *game.DeleteGameDraftResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kGameServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kGameServiceClient struct {
	*kClient
}

func (p *kGameServiceClient) GetGameList(ctx context.Context, req *game.GetGameListRequest, callOptions ...callopt.Option) (r *game.GetGameListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetGameList(ctx, req)
}

func (p *kGameServiceClient) GetGameDetail(ctx context.Context, req *game.GetGameDetailRequest, callOptions ...callopt.Option) (r *game.GetGameDetailResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetGameDetail(ctx, req)
}

func (p *kGameServiceClient) UpdateGameDraft(ctx context.Context, req *game.UpdateGameDraftRequest, callOptions ...callopt.Option) (r *game.UpdateGameDraftResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateGameDraft(ctx, req)
}

func (p *kGameServiceClient) CreateGameDetail(ctx context.Context, req *game.CreateGameDetailRequest, callOptions ...callopt.Option) (r *game.CreateGameDetailResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateGameDetail(ctx, req)
}

func (p *kGameServiceClient) ReviewGameVersion(ctx context.Context, req *game.ReviewGameVersionRequest, callOptions ...callopt.Option) (r *game.ReviewGameVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReviewGameVersion(ctx, req)
}

func (p *kGameServiceClient) DeleteGameDraft(ctx context.Context, req *game.DeleteGameDraftRequest, callOptions ...callopt.Option) (r *game.DeleteGameDraftResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteGameDraft(ctx, req)
}
