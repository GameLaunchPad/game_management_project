// Code generated by hertz generator.

package game_platform_api

import (
	"context"

	game_platform_api "github.com/GameLaunchPad/game_management_project/biz/model/game_platform_api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateCPMaterial .
// @router /api/v1/cp/materials [POST]
func CreateCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.CreateCPMaterialsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.CreateCPMaterialResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateCPMaterial .
// @router /api/v1/cp/materials/:id [PUT]
func UpdateCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.UpdateCPMaterialsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.UpdateCPMaterialResponse)

	c.JSON(consts.StatusOK, resp)
}

// ReviewCPMaterial .
// @router /api/v1/cp/materials/review [POST]
func ReviewCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.ReviewCPMaterialRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.ReviewCPMaterialResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetCPMaterial .
// @router /api/v1/cp/materials/:id [GET]
func GetCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.GetCPMaterialRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.GetCPMaterialResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetGameList .
// @router /api/v1/games [GET]
func GetGameList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.GetGameListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.GetGameListResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetGameDetail .
// @router /api/v1/games/:id [GET]
func GetGameDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.GetGameDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.GetGameDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateGameDetail .
// @router /api/v1/games [POST]
func CreateGameDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.CreateGameDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.CreateGameDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateGameDetail .
// @router /api/v1/games/:id [PUT]
func UpdateGameDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.UpdateGameDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.UpdateGameDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// ReviewGameVersion .
// @router /api/v1/games/review [POST]
func ReviewGameVersion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.ReviewGameVersionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(game_platform_api.ReviewGameVersionResponse)

	c.JSON(consts.StatusOK, resp)
}
