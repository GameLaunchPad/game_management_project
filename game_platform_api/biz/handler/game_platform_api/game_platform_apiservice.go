// Code generated by hertz generator.

package game_platform_api

import (
	"context"
	"fmt"
	"strconv"

	"github.com/GameLaunchPad/game_management_project/game/kitex_gen/game"
	"github.com/GameLaunchPad/game_management_project/game_platform_api/biz/model/common"
	game_platform_api "github.com/GameLaunchPad/game_management_project/game_platform_api/biz/model/game_platform_api"
	"github.com/GameLaunchPad/game_management_project/game_platform_api/biz/service"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateCPMaterial .
// @router /api/v1/cp/materials [POST]
func CreateCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.CreateCPMaterialsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	cpSvc := service.NewCpCenterService()
	rpcResp, err := cpSvc.CreateMaterial(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.CreateCPMaterialResponse)

	resp = &game_platform_api.CreateCPMaterialResponse{
		Data: &game_platform_api.CreateCPMaterialData{
			CpID:       strconv.FormatInt(rpcResp.CpID, 10),
			MaterialID: strconv.FormatInt(rpcResp.MaterialID, 10),
		},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateCPMaterial .
// @router /api/v1/cp/materials/:id [PUT]
func UpdateCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.UpdateCPMaterialsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cpSvc := service.NewCpCenterService()
	rpcResp, err := cpSvc.UpdateMaterial(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.UpdateCPMaterialResponse)

	resp = &game_platform_api.UpdateCPMaterialResponse{
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// ReviewCPMaterial .
// @router /api/v1/cp/materials/review [POST]
func ReviewCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.ReviewCPMaterialRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cpSvc := service.NewCpCenterService()
	rpcResp, err := cpSvc.ReviewMaterial(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.ReviewCPMaterialResponse)

	resp = &game_platform_api.ReviewCPMaterialResponse{
		Data:     &game_platform_api.ReviewCPMaterialData{},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// GetCPMaterial .
// @router /api/v1/cp/materials/:id [GET]
func GetCPMaterial(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.GetCPMaterialRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cpSvc := service.NewCpCenterService()
	rpcResp, err := cpSvc.GetMaterial(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.GetCPMaterialResponse)
	resp = &game_platform_api.GetCPMaterialResponse{
		Data: &game_platform_api.GetCPMaterialData{
			CpMaterial: &game_platform_api.CPMaterial{
				MaterialID:         strconv.FormatInt(rpcResp.CPMaterial.MaterialID, 10),
				CpID:               strconv.FormatInt(rpcResp.CPMaterial.CpID, 10),
				CpIcon:             rpcResp.CPMaterial.CpIcon,
				CpName:             rpcResp.CPMaterial.CpName,
				VerificationImages: rpcResp.CPMaterial.VerificationImages,
				BusinessLicense:    rpcResp.CPMaterial.BusinessLicenses,
				Website:            rpcResp.CPMaterial.Website,
				ReviewComment:      rpcResp.CPMaterial.ReviewComment,
				CreateTime:         rpcResp.CPMaterial.CreateTime,
				ModifyTime:         rpcResp.CPMaterial.ModifyTime,
				Status:             game_platform_api.MaterialStatus(rpcResp.CPMaterial.Status),
			},
		},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// GetGameList .
// @router /api/v1/games [GET]
func GetGameList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.GetGameListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	gameSvc := service.NewGameService()
	rpcResp, err := gameSvc.GetGameList(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.GetGameListResponse)

	resp = &game_platform_api.GetGameListResponse{
		Data: &game_platform_api.GetGameListData{
			GameList:   convertBriefGameListToAPI(rpcResp.GameList),
			TotalCount: rpcResp.TotalCount,
		},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// GetGameDetail .
// @router /api/v1/games/:id [GET]
func GetGameDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.GetGameDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	gameSvc := service.NewGameService()
	rpcResp, err := gameSvc.GetGameDetail(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.GetGameDetailResponse)

	resp = &game_platform_api.GetGameDetailResponse{
		Data: &game_platform_api.GetGameDetailData{
			GameDetail: convertGameDetailToAPI(rpcResp.GameDetail),
		},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// CreateGameDetail .
// @router /api/v1/games [POST]
func CreateGameDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.CreateGameDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	gameSvc := service.NewGameService()
	rpcResp, err := gameSvc.CreateGameDetail(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.CreateGameDetailResponse)

	resp = &game_platform_api.CreateGameDetailResponse{
		Data: &game_platform_api.CreateGameDetailData{
			GameID: fmt.Sprint(rpcResp.GameID),
		},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateGameDetail .
// @router /api/v1/games/:id [PUT]
func UpdateGameDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.UpdateGameDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	gameSvc := service.NewGameService()
	rpcResp, err := gameSvc.UpdateGameDetail(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.UpdateGameDetailResponse)

	resp = &game_platform_api.UpdateGameDetailResponse{
		Data:     &game_platform_api.UpdateGameDetailData{},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// ReviewGameVersion .
// @router /api/v1/games/review [POST]
func ReviewGameVersion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.ReviewGameVersionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	gameSvc := service.NewGameService()
	rpcResp, err := gameSvc.ReviewGameVersion(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.ReviewGameVersionResponse)

	resp = &game_platform_api.ReviewGameVersionResponse{
		Data:     &game_platform_api.ReviewGameVersionData{},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteGameDraft .
// @router /api/v1/games/:id/draft [DELETE]
func DeleteGameDraft(ctx context.Context, c *app.RequestContext) {
	var err error
	var req game_platform_api.DeleteGameDraftRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	gameSvc := service.NewGameService()
	rpcResp, err := gameSvc.DeleteGameDraft(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(game_platform_api.DeleteGameDraftResponse)

	resp = &game_platform_api.DeleteGameDraftResponse{
		Data:     &game_platform_api.DeleteGameDraftData{},
		BaseResp: (*common.BaseResp)(rpcResp.BaseResp),
	}

	c.JSON(consts.StatusOK, resp)
}

func convertBriefGameToAPI(rpcGame *game.BriefGame) *game_platform_api.BriefGame {
	if rpcGame == nil {
		return nil
	}
	return &game_platform_api.BriefGame{
		GameID:     fmt.Sprint(rpcGame.GameID),
		CpID:       fmt.Sprint(rpcGame.CpID),
		GameName:   rpcGame.GameName,
		GameIcon:   rpcGame.GameIcon,
		CreateTime: rpcGame.CreateTime,
		UpdateTime: rpcGame.UpdateTime,
		GameStatus: convertGameStatusToAPI(rpcGame.GameStatus),
	}
}

func convertBriefGameListToAPI(rpcList []*game.BriefGame) []*game_platform_api.BriefGame {
	apiList := make([]*game_platform_api.BriefGame, 0, len(rpcList))
	for _, bg := range rpcList {
		apiList = append(apiList, convertBriefGameToAPI(bg))
	}
	return apiList
}

func convertGameDetailToAPI(rpcDetail *game.GameDetail) *game_platform_api.GameDetail {
	if rpcDetail == nil {
		return nil
	}
	return &game_platform_api.GameDetail{
		GameID:            fmt.Sprint(rpcDetail.GameID),
		CpID:              fmt.Sprint(rpcDetail.CpID),
		OnlineGameVersion: convertGameVersionToAPI(rpcDetail.OnlineGameVersion),
		NewestGameVersion: convertGameVersionToAPI(rpcDetail.NewestGameVersion_),
		CreateTime:        rpcDetail.CreateTime,
		ModifyTime:        rpcDetail.ModifyTime,
	}
}

func convertGameVersionToAPI(rpcVersion *game.GameVersion) *game_platform_api.GameVersion {
	if rpcVersion == nil {
		return nil
	}
	return &game_platform_api.GameVersion{
		GameID:                 fmt.Sprint(rpcVersion.GameID),
		GameVersionID:          fmt.Sprint(rpcVersion.GamVersionID),
		GameName:               rpcVersion.GameName,
		GameIcon:               rpcVersion.GameIcon,
		GameIntroduction:       rpcVersion.GameIntroduction,
		GameIntroductionImages: rpcVersion.GameIntroductionImages,
		HeaderImage:            rpcVersion.HeaderImage,
		GamePlatforms:          convertPlatformToAPI(rpcVersion.GamePlatforms),
		PackageName:            rpcVersion.PackageName,
		DownloadURL:            rpcVersion.DownloadURL,
		GameStatus:             convertGameStatusToAPI(rpcVersion.GameStatus),
		ReviewRemark: &game_platform_api.ReviewRemark{ // 注意: rpc层目前只有comment和time
			Remark:     rpcVersion.ReviewComment,
			ReviewTime: rpcVersion.ReviewTime,
		},
		CreateTime: rpcVersion.CreateTime,
		UpdateTime: rpcVersion.UpdateTime,
	}
}

func convertGameStatusToAPI(status game.GameStatus) game_platform_api.GameStatus {
	switch status {
	case game.GameStatus_Draft:
		return game_platform_api.GameStatus_Draft
	case game.GameStatus_Reviewing:
		return game_platform_api.GameStatus_Reviewing
	case game.GameStatus_Published:
		return game_platform_api.GameStatus_Published
	case game.GameStatus_Rejected:
		return game_platform_api.GameStatus_Rejected
	default:
		return game_platform_api.GameStatus_Unset
	}
}

func convertPlatformToAPI(platforms []game.GamePlatform) []game_platform_api.GamePlatform {
	apiPlatforms := make([]game_platform_api.GamePlatform, 0, len(platforms))
	for _, p := range platforms {
		switch p {
		case game.GamePlatform_Android:
			apiPlatforms = append(apiPlatforms, game_platform_api.GamePlatform_Android)
		case game.GamePlatform_IOS:
			apiPlatforms = append(apiPlatforms, game_platform_api.GamePlatform_IOS)
		case game.GamePlatform_Web:
			apiPlatforms = append(apiPlatforms, game_platform_api.GamePlatform_Web)
		}
	}
	return apiPlatforms
}
