// Code generated by Kitex v0.15.1. DO NOT EDIT.

package cpcenterservice

import (
	"context"
	cp_center "github.com/GameLaunchPad/game_management_project/cp_center/kitex_gen/cp_center"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateCPMaterial(ctx context.Context, req *cp_center.CreateCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.CreateCPMaterialResponse, err error)
	UpdateCPMaterial(ctx context.Context, req *cp_center.UpdateCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.UpdateCPMaterialResponse, err error)
	ReviewCPMaterial(ctx context.Context, req *cp_center.ReviewCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.ReviewCPMaterialResponse, err error)
	GetCPMaterial(ctx context.Context, req *cp_center.GetCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.GetCPMaterialResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kCpCenterServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCpCenterServiceClient struct {
	*kClient
}

func (p *kCpCenterServiceClient) CreateCPMaterial(ctx context.Context, req *cp_center.CreateCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.CreateCPMaterialResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCPMaterial(ctx, req)
}

func (p *kCpCenterServiceClient) UpdateCPMaterial(ctx context.Context, req *cp_center.UpdateCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.UpdateCPMaterialResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCPMaterial(ctx, req)
}

func (p *kCpCenterServiceClient) ReviewCPMaterial(ctx context.Context, req *cp_center.ReviewCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.ReviewCPMaterialResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReviewCPMaterial(ctx, req)
}

func (p *kCpCenterServiceClient) GetCPMaterial(ctx context.Context, req *cp_center.GetCPMaterialRequest, callOptions ...callopt.Option) (r *cp_center.GetCPMaterialResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCPMaterial(ctx, req)
}
