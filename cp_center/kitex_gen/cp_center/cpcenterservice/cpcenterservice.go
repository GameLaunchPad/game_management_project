// Code generated by Kitex v0.15.1. DO NOT EDIT.

package cpcenterservice

import (
	"context"
	"errors"
	cp_center "github.com/GameLaunchPad/game_management_project/kitex_gen/cp_center"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateCPMaterial": kitex.NewMethodInfo(
		createCPMaterialHandler,
		newCpCenterServiceCreateCPMaterialArgs,
		newCpCenterServiceCreateCPMaterialResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateCPMaterial": kitex.NewMethodInfo(
		updateCPMaterialHandler,
		newCpCenterServiceUpdateCPMaterialArgs,
		newCpCenterServiceUpdateCPMaterialResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ReviewCPMaterial": kitex.NewMethodInfo(
		reviewCPMaterialHandler,
		newCpCenterServiceReviewCPMaterialArgs,
		newCpCenterServiceReviewCPMaterialResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCPMaterial": kitex.NewMethodInfo(
		getCPMaterialHandler,
		newCpCenterServiceGetCPMaterialArgs,
		newCpCenterServiceGetCPMaterialResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	cpCenterServiceServiceInfo                = NewServiceInfo()
	cpCenterServiceServiceInfoForClient       = NewServiceInfoForClient()
	cpCenterServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return cpCenterServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return cpCenterServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return cpCenterServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CpCenterService"
	handlerType := (*cp_center.CpCenterService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "cp_center",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func createCPMaterialHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cp_center.CpCenterServiceCreateCPMaterialArgs)
	realResult := result.(*cp_center.CpCenterServiceCreateCPMaterialResult)
	success, err := handler.(cp_center.CpCenterService).CreateCPMaterial(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCpCenterServiceCreateCPMaterialArgs() interface{} {
	return cp_center.NewCpCenterServiceCreateCPMaterialArgs()
}

func newCpCenterServiceCreateCPMaterialResult() interface{} {
	return cp_center.NewCpCenterServiceCreateCPMaterialResult()
}

func updateCPMaterialHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cp_center.CpCenterServiceUpdateCPMaterialArgs)
	realResult := result.(*cp_center.CpCenterServiceUpdateCPMaterialResult)
	success, err := handler.(cp_center.CpCenterService).UpdateCPMaterial(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCpCenterServiceUpdateCPMaterialArgs() interface{} {
	return cp_center.NewCpCenterServiceUpdateCPMaterialArgs()
}

func newCpCenterServiceUpdateCPMaterialResult() interface{} {
	return cp_center.NewCpCenterServiceUpdateCPMaterialResult()
}

func reviewCPMaterialHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cp_center.CpCenterServiceReviewCPMaterialArgs)
	realResult := result.(*cp_center.CpCenterServiceReviewCPMaterialResult)
	success, err := handler.(cp_center.CpCenterService).ReviewCPMaterial(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCpCenterServiceReviewCPMaterialArgs() interface{} {
	return cp_center.NewCpCenterServiceReviewCPMaterialArgs()
}

func newCpCenterServiceReviewCPMaterialResult() interface{} {
	return cp_center.NewCpCenterServiceReviewCPMaterialResult()
}

func getCPMaterialHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cp_center.CpCenterServiceGetCPMaterialArgs)
	realResult := result.(*cp_center.CpCenterServiceGetCPMaterialResult)
	success, err := handler.(cp_center.CpCenterService).GetCPMaterial(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCpCenterServiceGetCPMaterialArgs() interface{} {
	return cp_center.NewCpCenterServiceGetCPMaterialArgs()
}

func newCpCenterServiceGetCPMaterialResult() interface{} {
	return cp_center.NewCpCenterServiceGetCPMaterialResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateCPMaterial(ctx context.Context, req *cp_center.CreateCPMaterialRequest) (r *cp_center.CreateCPMaterialResponse, err error) {
	var _args cp_center.CpCenterServiceCreateCPMaterialArgs
	_args.Req = req
	var _result cp_center.CpCenterServiceCreateCPMaterialResult
	if err = p.c.Call(ctx, "CreateCPMaterial", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCPMaterial(ctx context.Context, req *cp_center.UpdateCPMaterialRequest) (r *cp_center.UpdateCPMaterialResponse, err error) {
	var _args cp_center.CpCenterServiceUpdateCPMaterialArgs
	_args.Req = req
	var _result cp_center.CpCenterServiceUpdateCPMaterialResult
	if err = p.c.Call(ctx, "UpdateCPMaterial", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReviewCPMaterial(ctx context.Context, req *cp_center.ReviewCPMaterialRequest) (r *cp_center.ReviewCPMaterialResponse, err error) {
	var _args cp_center.CpCenterServiceReviewCPMaterialArgs
	_args.Req = req
	var _result cp_center.CpCenterServiceReviewCPMaterialResult
	if err = p.c.Call(ctx, "ReviewCPMaterial", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCPMaterial(ctx context.Context, req *cp_center.GetCPMaterialRequest) (r *cp_center.GetCPMaterialResponse, err error) {
	var _args cp_center.CpCenterServiceGetCPMaterialArgs
	_args.Req = req
	var _result cp_center.CpCenterServiceGetCPMaterialResult
	if err = p.c.Call(ctx, "GetCPMaterial", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
