// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package cp_center

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/GameLaunchPad/game_management_project/kitex_gen/common"
)

type MaterialStatus int64

const (
	MaterialStatus_Unset     MaterialStatus = 0
	MaterialStatus_Draft     MaterialStatus = 1
	MaterialStatus_Reviewing MaterialStatus = 2
	MaterialStatus_Online    MaterialStatus = 3
	MaterialStatus_Rejected  MaterialStatus = 4
)

func (p MaterialStatus) String() string {
	switch p {
	case MaterialStatus_Unset:
		return "Unset"
	case MaterialStatus_Draft:
		return "Draft"
	case MaterialStatus_Reviewing:
		return "Reviewing"
	case MaterialStatus_Online:
		return "Online"
	case MaterialStatus_Rejected:
		return "Rejected"
	}
	return "<UNSET>"
}

func MaterialStatusFromString(s string) (MaterialStatus, error) {
	switch s {
	case "Unset":
		return MaterialStatus_Unset, nil
	case "Draft":
		return MaterialStatus_Draft, nil
	case "Reviewing":
		return MaterialStatus_Reviewing, nil
	case "Online":
		return MaterialStatus_Online, nil
	case "Rejected":
		return MaterialStatus_Rejected, nil
	}
	return MaterialStatus(0), fmt.Errorf("not a valid MaterialStatus string")
}

func MaterialStatusPtr(v MaterialStatus) *MaterialStatus { return &v }
func (p *MaterialStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = MaterialStatus(result.Int64)
	return
}

func (p *MaterialStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SubmitMode int64

const (
	SubmitMode_Unset        SubmitMode = 0
	SubmitMode_SubmitDraft  SubmitMode = 1
	SubmitMode_SubmitReview SubmitMode = 2
)

func (p SubmitMode) String() string {
	switch p {
	case SubmitMode_Unset:
		return "Unset"
	case SubmitMode_SubmitDraft:
		return "SubmitDraft"
	case SubmitMode_SubmitReview:
		return "SubmitReview"
	}
	return "<UNSET>"
}

func SubmitModeFromString(s string) (SubmitMode, error) {
	switch s {
	case "Unset":
		return SubmitMode_Unset, nil
	case "SubmitDraft":
		return SubmitMode_SubmitDraft, nil
	case "SubmitReview":
		return SubmitMode_SubmitReview, nil
	}
	return SubmitMode(0), fmt.Errorf("not a valid SubmitMode string")
}

func SubmitModePtr(v SubmitMode) *SubmitMode { return &v }
func (p *SubmitMode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SubmitMode(result.Int64)
	return
}

func (p *SubmitMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ReviewResult_ int64

const (
	ReviewResult__Unset  ReviewResult_ = 0
	ReviewResult__Pass   ReviewResult_ = 1
	ReviewResult__Reject ReviewResult_ = 2
)

func (p ReviewResult_) String() string {
	switch p {
	case ReviewResult__Unset:
		return "Unset"
	case ReviewResult__Pass:
		return "Pass"
	case ReviewResult__Reject:
		return "Reject"
	}
	return "<UNSET>"
}

func ReviewResult_FromString(s string) (ReviewResult_, error) {
	switch s {
	case "Unset":
		return ReviewResult__Unset, nil
	case "Pass":
		return ReviewResult__Pass, nil
	case "Reject":
		return ReviewResult__Reject, nil
	}
	return ReviewResult_(0), fmt.Errorf("not a valid ReviewResult_ string")
}

func ReviewResult_Ptr(v ReviewResult_) *ReviewResult_ { return &v }
func (p *ReviewResult_) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ReviewResult_(result.Int64)
	return
}

func (p *ReviewResult_) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CPMaterial struct {
	MaterialID         int64          `thrift:"MaterialID,1" frugal:"1,default,i64" json:"MaterialID"`
	CpID               int64          `thrift:"CpID,2" frugal:"2,default,i64" json:"CpID"`
	CpIcon             string         `thrift:"CpIcon,3" frugal:"3,default,string" json:"CpIcon"`
	CpName             string         `thrift:"CpName,4" frugal:"4,default,string" json:"CpName"`
	VerificationImages []string       `thrift:"VerificationImages,5" frugal:"5,default,list<string>" json:"VerificationImages"`
	BusinessLicenses   string         `thrift:"BusinessLicenses,6" frugal:"6,default,string" json:"BusinessLicenses"`
	Website            string         `thrift:"Website,7" frugal:"7,default,string" json:"Website"`
	Status             MaterialStatus `thrift:"Status,8" frugal:"8,default,MaterialStatus" json:"Status"`
	ReviewComment      string         `thrift:"ReviewComment,9" frugal:"9,default,string" json:"ReviewComment"`
	CreateTime         int64          `thrift:"CreateTime,10" frugal:"10,default,i64" json:"CreateTime"`
	ModifyTime         int64          `thrift:"ModifyTime,11" frugal:"11,default,i64" json:"ModifyTime"`
}

func NewCPMaterial() *CPMaterial {
	return &CPMaterial{}
}

func (p *CPMaterial) InitDefault() {
}

func (p *CPMaterial) GetMaterialID() (v int64) {
	return p.MaterialID
}

func (p *CPMaterial) GetCpID() (v int64) {
	return p.CpID
}

func (p *CPMaterial) GetCpIcon() (v string) {
	return p.CpIcon
}

func (p *CPMaterial) GetCpName() (v string) {
	return p.CpName
}

func (p *CPMaterial) GetVerificationImages() (v []string) {
	return p.VerificationImages
}

func (p *CPMaterial) GetBusinessLicenses() (v string) {
	return p.BusinessLicenses
}

func (p *CPMaterial) GetWebsite() (v string) {
	return p.Website
}

func (p *CPMaterial) GetStatus() (v MaterialStatus) {
	return p.Status
}

func (p *CPMaterial) GetReviewComment() (v string) {
	return p.ReviewComment
}

func (p *CPMaterial) GetCreateTime() (v int64) {
	return p.CreateTime
}

func (p *CPMaterial) GetModifyTime() (v int64) {
	return p.ModifyTime
}
func (p *CPMaterial) SetMaterialID(val int64) {
	p.MaterialID = val
}
func (p *CPMaterial) SetCpID(val int64) {
	p.CpID = val
}
func (p *CPMaterial) SetCpIcon(val string) {
	p.CpIcon = val
}
func (p *CPMaterial) SetCpName(val string) {
	p.CpName = val
}
func (p *CPMaterial) SetVerificationImages(val []string) {
	p.VerificationImages = val
}
func (p *CPMaterial) SetBusinessLicenses(val string) {
	p.BusinessLicenses = val
}
func (p *CPMaterial) SetWebsite(val string) {
	p.Website = val
}
func (p *CPMaterial) SetStatus(val MaterialStatus) {
	p.Status = val
}
func (p *CPMaterial) SetReviewComment(val string) {
	p.ReviewComment = val
}
func (p *CPMaterial) SetCreateTime(val int64) {
	p.CreateTime = val
}
func (p *CPMaterial) SetModifyTime(val int64) {
	p.ModifyTime = val
}

func (p *CPMaterial) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CPMaterial(%+v)", *p)
}

var fieldIDToName_CPMaterial = map[int16]string{
	1:  "MaterialID",
	2:  "CpID",
	3:  "CpIcon",
	4:  "CpName",
	5:  "VerificationImages",
	6:  "BusinessLicenses",
	7:  "Website",
	8:  "Status",
	9:  "ReviewComment",
	10: "CreateTime",
	11: "ModifyTime",
}

type CreateCPMaterialRequest struct {
	CPMaterial *CPMaterial `thrift:"CPMaterial,1" frugal:"1,default,CPMaterial" json:"CPMaterial"`
	SubmitMode SubmitMode  `thrift:"SubmitMode,2" frugal:"2,default,SubmitMode" json:"SubmitMode"`
}

func NewCreateCPMaterialRequest() *CreateCPMaterialRequest {
	return &CreateCPMaterialRequest{}
}

func (p *CreateCPMaterialRequest) InitDefault() {
}

var CreateCPMaterialRequest_CPMaterial_DEFAULT *CPMaterial

func (p *CreateCPMaterialRequest) GetCPMaterial() (v *CPMaterial) {
	if !p.IsSetCPMaterial() {
		return CreateCPMaterialRequest_CPMaterial_DEFAULT
	}
	return p.CPMaterial
}

func (p *CreateCPMaterialRequest) GetSubmitMode() (v SubmitMode) {
	return p.SubmitMode
}
func (p *CreateCPMaterialRequest) SetCPMaterial(val *CPMaterial) {
	p.CPMaterial = val
}
func (p *CreateCPMaterialRequest) SetSubmitMode(val SubmitMode) {
	p.SubmitMode = val
}

func (p *CreateCPMaterialRequest) IsSetCPMaterial() bool {
	return p.CPMaterial != nil
}

func (p *CreateCPMaterialRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCPMaterialRequest(%+v)", *p)
}

var fieldIDToName_CreateCPMaterialRequest = map[int16]string{
	1: "CPMaterial",
	2: "SubmitMode",
}

type CreateCPMaterialResponse struct {
	CpID       int64            `thrift:"CpID,1" frugal:"1,default,i64" json:"CpID"`
	MaterialID int64            `thrift:"MaterialID,2" frugal:"2,default,i64" json:"MaterialID"`
	BaseResp   *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewCreateCPMaterialResponse() *CreateCPMaterialResponse {
	return &CreateCPMaterialResponse{}
}

func (p *CreateCPMaterialResponse) InitDefault() {
}

func (p *CreateCPMaterialResponse) GetCpID() (v int64) {
	return p.CpID
}

func (p *CreateCPMaterialResponse) GetMaterialID() (v int64) {
	return p.MaterialID
}

var CreateCPMaterialResponse_BaseResp_DEFAULT *common.BaseResp

func (p *CreateCPMaterialResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateCPMaterialResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateCPMaterialResponse) SetCpID(val int64) {
	p.CpID = val
}
func (p *CreateCPMaterialResponse) SetMaterialID(val int64) {
	p.MaterialID = val
}
func (p *CreateCPMaterialResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *CreateCPMaterialResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateCPMaterialResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCPMaterialResponse(%+v)", *p)
}

var fieldIDToName_CreateCPMaterialResponse = map[int16]string{
	1:   "CpID",
	2:   "MaterialID",
	255: "BaseResp",
}

type UpdateCPMaterialRequest struct {
	MaterialID int64       `thrift:"MaterialID,1" frugal:"1,default,i64" json:"MaterialID"`
	CpMaterial *CPMaterial `thrift:"CpMaterial,2" frugal:"2,default,CPMaterial" json:"CpMaterial"`
	SubmitMode SubmitMode  `thrift:"SubmitMode,3" frugal:"3,default,SubmitMode" json:"SubmitMode"`
}

func NewUpdateCPMaterialRequest() *UpdateCPMaterialRequest {
	return &UpdateCPMaterialRequest{}
}

func (p *UpdateCPMaterialRequest) InitDefault() {
}

func (p *UpdateCPMaterialRequest) GetMaterialID() (v int64) {
	return p.MaterialID
}

var UpdateCPMaterialRequest_CpMaterial_DEFAULT *CPMaterial

func (p *UpdateCPMaterialRequest) GetCpMaterial() (v *CPMaterial) {
	if !p.IsSetCpMaterial() {
		return UpdateCPMaterialRequest_CpMaterial_DEFAULT
	}
	return p.CpMaterial
}

func (p *UpdateCPMaterialRequest) GetSubmitMode() (v SubmitMode) {
	return p.SubmitMode
}
func (p *UpdateCPMaterialRequest) SetMaterialID(val int64) {
	p.MaterialID = val
}
func (p *UpdateCPMaterialRequest) SetCpMaterial(val *CPMaterial) {
	p.CpMaterial = val
}
func (p *UpdateCPMaterialRequest) SetSubmitMode(val SubmitMode) {
	p.SubmitMode = val
}

func (p *UpdateCPMaterialRequest) IsSetCpMaterial() bool {
	return p.CpMaterial != nil
}

func (p *UpdateCPMaterialRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCPMaterialRequest(%+v)", *p)
}

var fieldIDToName_UpdateCPMaterialRequest = map[int16]string{
	1: "MaterialID",
	2: "CpMaterial",
	3: "SubmitMode",
}

type UpdateCPMaterialResponse struct {
	BaseResp *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewUpdateCPMaterialResponse() *UpdateCPMaterialResponse {
	return &UpdateCPMaterialResponse{}
}

func (p *UpdateCPMaterialResponse) InitDefault() {
}

var UpdateCPMaterialResponse_BaseResp_DEFAULT *common.BaseResp

func (p *UpdateCPMaterialResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return UpdateCPMaterialResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateCPMaterialResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *UpdateCPMaterialResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateCPMaterialResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCPMaterialResponse(%+v)", *p)
}

var fieldIDToName_UpdateCPMaterialResponse = map[int16]string{
	255: "BaseResp",
}

type ReviewCPMaterialRequest struct {
	CpID          int64         `thrift:"CpID,1" frugal:"1,default,i64" json:"CpID"`
	MaterialID    int64         `thrift:"MaterialID,2" frugal:"2,default,i64" json:"MaterialID"`
	ReviewResult_ ReviewResult_ `thrift:"review_result,3" frugal:"3,default,ReviewResult_" json:"review_result"`
}

func NewReviewCPMaterialRequest() *ReviewCPMaterialRequest {
	return &ReviewCPMaterialRequest{}
}

func (p *ReviewCPMaterialRequest) InitDefault() {
}

func (p *ReviewCPMaterialRequest) GetCpID() (v int64) {
	return p.CpID
}

func (p *ReviewCPMaterialRequest) GetMaterialID() (v int64) {
	return p.MaterialID
}

func (p *ReviewCPMaterialRequest) GetReviewResult_() (v ReviewResult_) {
	return p.ReviewResult_
}
func (p *ReviewCPMaterialRequest) SetCpID(val int64) {
	p.CpID = val
}
func (p *ReviewCPMaterialRequest) SetMaterialID(val int64) {
	p.MaterialID = val
}
func (p *ReviewCPMaterialRequest) SetReviewResult_(val ReviewResult_) {
	p.ReviewResult_ = val
}

func (p *ReviewCPMaterialRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewCPMaterialRequest(%+v)", *p)
}

var fieldIDToName_ReviewCPMaterialRequest = map[int16]string{
	1: "CpID",
	2: "MaterialID",
	3: "review_result",
}

type ReviewCPMaterialResponse struct {
	BaseResp *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewReviewCPMaterialResponse() *ReviewCPMaterialResponse {
	return &ReviewCPMaterialResponse{}
}

func (p *ReviewCPMaterialResponse) InitDefault() {
}

var ReviewCPMaterialResponse_BaseResp_DEFAULT *common.BaseResp

func (p *ReviewCPMaterialResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return ReviewCPMaterialResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ReviewCPMaterialResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *ReviewCPMaterialResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ReviewCPMaterialResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewCPMaterialResponse(%+v)", *p)
}

var fieldIDToName_ReviewCPMaterialResponse = map[int16]string{
	255: "BaseResp",
}

type GetCPMaterialRequest struct {
	CpID int64 `thrift:"CpID,1" frugal:"1,default,i64" json:"CpID"`
}

func NewGetCPMaterialRequest() *GetCPMaterialRequest {
	return &GetCPMaterialRequest{}
}

func (p *GetCPMaterialRequest) InitDefault() {
}

func (p *GetCPMaterialRequest) GetCpID() (v int64) {
	return p.CpID
}
func (p *GetCPMaterialRequest) SetCpID(val int64) {
	p.CpID = val
}

func (p *GetCPMaterialRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCPMaterialRequest(%+v)", *p)
}

var fieldIDToName_GetCPMaterialRequest = map[int16]string{
	1: "CpID",
}

type GetCPMaterialResponse struct {
	CPMaterial *CPMaterial      `thrift:"CPMaterial,1" frugal:"1,default,CPMaterial" json:"CPMaterial"`
	BaseResp   *common.BaseResp `thrift:"BaseResp,255" frugal:"255,default,common.BaseResp" json:"BaseResp"`
}

func NewGetCPMaterialResponse() *GetCPMaterialResponse {
	return &GetCPMaterialResponse{}
}

func (p *GetCPMaterialResponse) InitDefault() {
}

var GetCPMaterialResponse_CPMaterial_DEFAULT *CPMaterial

func (p *GetCPMaterialResponse) GetCPMaterial() (v *CPMaterial) {
	if !p.IsSetCPMaterial() {
		return GetCPMaterialResponse_CPMaterial_DEFAULT
	}
	return p.CPMaterial
}

var GetCPMaterialResponse_BaseResp_DEFAULT *common.BaseResp

func (p *GetCPMaterialResponse) GetBaseResp() (v *common.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetCPMaterialResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetCPMaterialResponse) SetCPMaterial(val *CPMaterial) {
	p.CPMaterial = val
}
func (p *GetCPMaterialResponse) SetBaseResp(val *common.BaseResp) {
	p.BaseResp = val
}

func (p *GetCPMaterialResponse) IsSetCPMaterial() bool {
	return p.CPMaterial != nil
}

func (p *GetCPMaterialResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetCPMaterialResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCPMaterialResponse(%+v)", *p)
}

var fieldIDToName_GetCPMaterialResponse = map[int16]string{
	1:   "CPMaterial",
	255: "BaseResp",
}

type CpCenterService interface {
	CreateCPMaterial(ctx context.Context, req *CreateCPMaterialRequest) (r *CreateCPMaterialResponse, err error)

	UpdateCPMaterial(ctx context.Context, req *UpdateCPMaterialRequest) (r *UpdateCPMaterialResponse, err error)

	ReviewCPMaterial(ctx context.Context, req *ReviewCPMaterialRequest) (r *ReviewCPMaterialResponse, err error)

	GetCPMaterial(ctx context.Context, req *GetCPMaterialRequest) (r *GetCPMaterialResponse, err error)
}

type CpCenterServiceCreateCPMaterialArgs struct {
	Req *CreateCPMaterialRequest `thrift:"req,1" frugal:"1,default,CreateCPMaterialRequest" json:"req"`
}

func NewCpCenterServiceCreateCPMaterialArgs() *CpCenterServiceCreateCPMaterialArgs {
	return &CpCenterServiceCreateCPMaterialArgs{}
}

func (p *CpCenterServiceCreateCPMaterialArgs) InitDefault() {
}

var CpCenterServiceCreateCPMaterialArgs_Req_DEFAULT *CreateCPMaterialRequest

func (p *CpCenterServiceCreateCPMaterialArgs) GetReq() (v *CreateCPMaterialRequest) {
	if !p.IsSetReq() {
		return CpCenterServiceCreateCPMaterialArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CpCenterServiceCreateCPMaterialArgs) SetReq(val *CreateCPMaterialRequest) {
	p.Req = val
}

func (p *CpCenterServiceCreateCPMaterialArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CpCenterServiceCreateCPMaterialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceCreateCPMaterialArgs(%+v)", *p)
}

var fieldIDToName_CpCenterServiceCreateCPMaterialArgs = map[int16]string{
	1: "req",
}

type CpCenterServiceCreateCPMaterialResult struct {
	Success *CreateCPMaterialResponse `thrift:"success,0,optional" frugal:"0,optional,CreateCPMaterialResponse" json:"success,omitempty"`
}

func NewCpCenterServiceCreateCPMaterialResult() *CpCenterServiceCreateCPMaterialResult {
	return &CpCenterServiceCreateCPMaterialResult{}
}

func (p *CpCenterServiceCreateCPMaterialResult) InitDefault() {
}

var CpCenterServiceCreateCPMaterialResult_Success_DEFAULT *CreateCPMaterialResponse

func (p *CpCenterServiceCreateCPMaterialResult) GetSuccess() (v *CreateCPMaterialResponse) {
	if !p.IsSetSuccess() {
		return CpCenterServiceCreateCPMaterialResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CpCenterServiceCreateCPMaterialResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCPMaterialResponse)
}

func (p *CpCenterServiceCreateCPMaterialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CpCenterServiceCreateCPMaterialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceCreateCPMaterialResult(%+v)", *p)
}

var fieldIDToName_CpCenterServiceCreateCPMaterialResult = map[int16]string{
	0: "success",
}

type CpCenterServiceUpdateCPMaterialArgs struct {
	Req *UpdateCPMaterialRequest `thrift:"req,1" frugal:"1,default,UpdateCPMaterialRequest" json:"req"`
}

func NewCpCenterServiceUpdateCPMaterialArgs() *CpCenterServiceUpdateCPMaterialArgs {
	return &CpCenterServiceUpdateCPMaterialArgs{}
}

func (p *CpCenterServiceUpdateCPMaterialArgs) InitDefault() {
}

var CpCenterServiceUpdateCPMaterialArgs_Req_DEFAULT *UpdateCPMaterialRequest

func (p *CpCenterServiceUpdateCPMaterialArgs) GetReq() (v *UpdateCPMaterialRequest) {
	if !p.IsSetReq() {
		return CpCenterServiceUpdateCPMaterialArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CpCenterServiceUpdateCPMaterialArgs) SetReq(val *UpdateCPMaterialRequest) {
	p.Req = val
}

func (p *CpCenterServiceUpdateCPMaterialArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CpCenterServiceUpdateCPMaterialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceUpdateCPMaterialArgs(%+v)", *p)
}

var fieldIDToName_CpCenterServiceUpdateCPMaterialArgs = map[int16]string{
	1: "req",
}

type CpCenterServiceUpdateCPMaterialResult struct {
	Success *UpdateCPMaterialResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateCPMaterialResponse" json:"success,omitempty"`
}

func NewCpCenterServiceUpdateCPMaterialResult() *CpCenterServiceUpdateCPMaterialResult {
	return &CpCenterServiceUpdateCPMaterialResult{}
}

func (p *CpCenterServiceUpdateCPMaterialResult) InitDefault() {
}

var CpCenterServiceUpdateCPMaterialResult_Success_DEFAULT *UpdateCPMaterialResponse

func (p *CpCenterServiceUpdateCPMaterialResult) GetSuccess() (v *UpdateCPMaterialResponse) {
	if !p.IsSetSuccess() {
		return CpCenterServiceUpdateCPMaterialResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CpCenterServiceUpdateCPMaterialResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateCPMaterialResponse)
}

func (p *CpCenterServiceUpdateCPMaterialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CpCenterServiceUpdateCPMaterialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceUpdateCPMaterialResult(%+v)", *p)
}

var fieldIDToName_CpCenterServiceUpdateCPMaterialResult = map[int16]string{
	0: "success",
}

type CpCenterServiceReviewCPMaterialArgs struct {
	Req *ReviewCPMaterialRequest `thrift:"req,1" frugal:"1,default,ReviewCPMaterialRequest" json:"req"`
}

func NewCpCenterServiceReviewCPMaterialArgs() *CpCenterServiceReviewCPMaterialArgs {
	return &CpCenterServiceReviewCPMaterialArgs{}
}

func (p *CpCenterServiceReviewCPMaterialArgs) InitDefault() {
}

var CpCenterServiceReviewCPMaterialArgs_Req_DEFAULT *ReviewCPMaterialRequest

func (p *CpCenterServiceReviewCPMaterialArgs) GetReq() (v *ReviewCPMaterialRequest) {
	if !p.IsSetReq() {
		return CpCenterServiceReviewCPMaterialArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CpCenterServiceReviewCPMaterialArgs) SetReq(val *ReviewCPMaterialRequest) {
	p.Req = val
}

func (p *CpCenterServiceReviewCPMaterialArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CpCenterServiceReviewCPMaterialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceReviewCPMaterialArgs(%+v)", *p)
}

var fieldIDToName_CpCenterServiceReviewCPMaterialArgs = map[int16]string{
	1: "req",
}

type CpCenterServiceReviewCPMaterialResult struct {
	Success *ReviewCPMaterialResponse `thrift:"success,0,optional" frugal:"0,optional,ReviewCPMaterialResponse" json:"success,omitempty"`
}

func NewCpCenterServiceReviewCPMaterialResult() *CpCenterServiceReviewCPMaterialResult {
	return &CpCenterServiceReviewCPMaterialResult{}
}

func (p *CpCenterServiceReviewCPMaterialResult) InitDefault() {
}

var CpCenterServiceReviewCPMaterialResult_Success_DEFAULT *ReviewCPMaterialResponse

func (p *CpCenterServiceReviewCPMaterialResult) GetSuccess() (v *ReviewCPMaterialResponse) {
	if !p.IsSetSuccess() {
		return CpCenterServiceReviewCPMaterialResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CpCenterServiceReviewCPMaterialResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReviewCPMaterialResponse)
}

func (p *CpCenterServiceReviewCPMaterialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CpCenterServiceReviewCPMaterialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceReviewCPMaterialResult(%+v)", *p)
}

var fieldIDToName_CpCenterServiceReviewCPMaterialResult = map[int16]string{
	0: "success",
}

type CpCenterServiceGetCPMaterialArgs struct {
	Req *GetCPMaterialRequest `thrift:"req,1" frugal:"1,default,GetCPMaterialRequest" json:"req"`
}

func NewCpCenterServiceGetCPMaterialArgs() *CpCenterServiceGetCPMaterialArgs {
	return &CpCenterServiceGetCPMaterialArgs{}
}

func (p *CpCenterServiceGetCPMaterialArgs) InitDefault() {
}

var CpCenterServiceGetCPMaterialArgs_Req_DEFAULT *GetCPMaterialRequest

func (p *CpCenterServiceGetCPMaterialArgs) GetReq() (v *GetCPMaterialRequest) {
	if !p.IsSetReq() {
		return CpCenterServiceGetCPMaterialArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CpCenterServiceGetCPMaterialArgs) SetReq(val *GetCPMaterialRequest) {
	p.Req = val
}

func (p *CpCenterServiceGetCPMaterialArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CpCenterServiceGetCPMaterialArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceGetCPMaterialArgs(%+v)", *p)
}

var fieldIDToName_CpCenterServiceGetCPMaterialArgs = map[int16]string{
	1: "req",
}

type CpCenterServiceGetCPMaterialResult struct {
	Success *GetCPMaterialResponse `thrift:"success,0,optional" frugal:"0,optional,GetCPMaterialResponse" json:"success,omitempty"`
}

func NewCpCenterServiceGetCPMaterialResult() *CpCenterServiceGetCPMaterialResult {
	return &CpCenterServiceGetCPMaterialResult{}
}

func (p *CpCenterServiceGetCPMaterialResult) InitDefault() {
}

var CpCenterServiceGetCPMaterialResult_Success_DEFAULT *GetCPMaterialResponse

func (p *CpCenterServiceGetCPMaterialResult) GetSuccess() (v *GetCPMaterialResponse) {
	if !p.IsSetSuccess() {
		return CpCenterServiceGetCPMaterialResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CpCenterServiceGetCPMaterialResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCPMaterialResponse)
}

func (p *CpCenterServiceGetCPMaterialResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CpCenterServiceGetCPMaterialResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpCenterServiceGetCPMaterialResult(%+v)", *p)
}

var fieldIDToName_CpCenterServiceGetCPMaterialResult = map[int16]string{
	0: "success",
}
