// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/mocks/mock_repo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ddl "github.com/GameLaunchPad/game_management_project/cp_center/dao/ddl"
	gomock "go.uber.org/mock/gomock"
)

// MockICPMaterialRepo is a mock of ICPMaterialRepo interface.
type MockICPMaterialRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICPMaterialRepoMockRecorder
	isgomock struct{}
}

// MockICPMaterialRepoMockRecorder is the mock recorder for MockICPMaterialRepo.
type MockICPMaterialRepoMockRecorder struct {
	mock *MockICPMaterialRepo
}

// NewMockICPMaterialRepo creates a new mock instance.
func NewMockICPMaterialRepo(ctrl *gomock.Controller) *MockICPMaterialRepo {
	mock := &MockICPMaterialRepo{ctrl: ctrl}
	mock.recorder = &MockICPMaterialRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICPMaterialRepo) EXPECT() *MockICPMaterialRepoMockRecorder {
	return m.recorder
}

// CreateMaterial mocks base method.
func (m *MockICPMaterialRepo) CreateMaterial(ctx context.Context, material *ddl.GpCpMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMaterial", ctx, material)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMaterial indicates an expected call of CreateMaterial.
func (mr *MockICPMaterialRepoMockRecorder) CreateMaterial(ctx, material any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMaterial", reflect.TypeOf((*MockICPMaterialRepo)(nil).CreateMaterial), ctx, material)
}

// GetMaterialByCPID mocks base method.
func (m *MockICPMaterialRepo) GetMaterialByCPID(ctx context.Context, cpID int64) (*ddl.GpCpMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialByCPID", ctx, cpID)
	ret0, _ := ret[0].(*ddl.GpCpMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialByCPID indicates an expected call of GetMaterialByCPID.
func (mr *MockICPMaterialRepoMockRecorder) GetMaterialByCPID(ctx, cpID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialByCPID", reflect.TypeOf((*MockICPMaterialRepo)(nil).GetMaterialByCPID), ctx, cpID)
}

// GetMaterialByID mocks base method.
func (m *MockICPMaterialRepo) GetMaterialByID(ctx context.Context, materialID int64) (*ddl.GpCpMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialByID", ctx, materialID)
	ret0, _ := ret[0].(*ddl.GpCpMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialByID indicates an expected call of GetMaterialByID.
func (mr *MockICPMaterialRepoMockRecorder) GetMaterialByID(ctx, materialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialByID", reflect.TypeOf((*MockICPMaterialRepo)(nil).GetMaterialByID), ctx, materialID)
}

// UpdateMaterial mocks base method.
func (m *MockICPMaterialRepo) UpdateMaterial(ctx context.Context, materialID int64, updates map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaterial", ctx, materialID, updates)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMaterial indicates an expected call of UpdateMaterial.
func (mr *MockICPMaterialRepoMockRecorder) UpdateMaterial(ctx, materialID, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaterial", reflect.TypeOf((*MockICPMaterialRepo)(nil).UpdateMaterial), ctx, materialID, updates)
}

// MockICPRepo is a mock of ICPRepo interface.
type MockICPRepo struct {
	ctrl     *gomock.Controller
	recorder *MockICPRepoMockRecorder
	isgomock struct{}
}

// MockICPRepoMockRecorder is the mock recorder for MockICPRepo.
type MockICPRepoMockRecorder struct {
	mock *MockICPRepo
}

// NewMockICPRepo creates a new mock instance.
func NewMockICPRepo(ctrl *gomock.Controller) *MockICPRepo {
	mock := &MockICPRepo{ctrl: ctrl}
	mock.recorder = &MockICPRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICPRepo) EXPECT() *MockICPRepoMockRecorder {
	return m.recorder
}

// CreateCP mocks base method.
func (m *MockICPRepo) CreateCP(ctx context.Context, cp *ddl.GpCp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCP", ctx, cp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCP indicates an expected call of CreateCP.
func (mr *MockICPRepoMockRecorder) CreateCP(ctx, cp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCP", reflect.TypeOf((*MockICPRepo)(nil).CreateCP), ctx, cp)
}

// GetCPByID mocks base method.
func (m *MockICPRepo) GetCPByID(ctx context.Context, cpID int64) (*ddl.GpCp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPByID", ctx, cpID)
	ret0, _ := ret[0].(*ddl.GpCp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPByID indicates an expected call of GetCPByID.
func (mr *MockICPRepoMockRecorder) GetCPByID(ctx, cpID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPByID", reflect.TypeOf((*MockICPRepo)(nil).GetCPByID), ctx, cpID)
}

// UpdateCP mocks base method.
func (m *MockICPRepo) UpdateCP(ctx context.Context, cpID int64, updates map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCP", ctx, cpID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCP indicates an expected call of UpdateCP.
func (mr *MockICPRepoMockRecorder) UpdateCP(ctx, cpID, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCP", reflect.TypeOf((*MockICPRepo)(nil).UpdateCP), ctx, cpID, updates)
}
